import { assertNxTask } from './assert-nx-task';

// TODO: maybe there is a public api for this list provided by nx
// https://nx.dev/reference/environment-variables
export const NX_ENV_VARS = {
  // always set by nx
  NX_TASK_TARGET_PROJECT: 'NX_TASK_TARGET_PROJECT',
  NX_TASK_TARGET_TARGET: 'NX_TASK_TARGET_TARGET',
  NX_TASK_TARGET_CONFIGURATION: 'NX_TASK_TARGET_CONFIGURATION',
  NX_DRY_RUN: 'NX_DRY_RUN',
  NX_INTERACTIVE: 'NX_INTERACTIVE',
  // can be set
  NX_ADD_PLUGINS: 'NX_ADD_PLUGINS',
  NX_BASE: 'NX_BASE',
  NX_CACHE_DIRECTORY: 'NX_CACHE_DIRECTORY',
  NX_CACHE_PROJECT_GRAPH: 'NX_CACHE_PROJECT_GRAPH',
  NX_DAEMON: 'NX_DAEMON',
  NX_DEFAULT_PROJECT: 'NX_DEFAULT_PROJECT',
  NX_HEAD: 'NX_HEAD',
  NX_PERF_LOGGING: 'NX_PERF_LOGGING',
  NX_PROFILE: 'NX_PROFILE',
  NX_WORKSPACE_DATA_CACHE_DIRECTORY: 'NX_WORKSPACE_DATA_CACHE_DIRECTORY',
  NX_PROJECT_GRAPH_MAX_WORKERS: 'NX_PROJECT_GRAPH_MAX_WORKERS',
  NX_PARALLEL: 'NX_PARALLEL',
  NX_RUNNER: 'NX_RUNNER',
  NX_SKIP_NX_CACHE: 'NX_SKIP_NX_CACHE',
  NX_TASKS_RUNNER: 'NX_TASKS_RUNNER',
  NX_TASKS_RUNNER_DYNAMIC_OUTPUT: 'NX_TASKS_RUNNER_DYNAMIC_OUTPUT',
  NX_VERBOSE_LOGGING: 'NX_VERBOSE_LOGGING',
  NX_GENERATE_QUIET: 'NX_GENERATE_QUIET',
  NX_PREFER_TS_NODE: 'NX_PREFER_TS_NODE',
  NX_IGNORE_CYCLES: 'NX_IGNORE_CYCLES',
  NX_BATCH_MODE: 'NX_BATCH_MODE',
  NX_SKIP_LOG_GROUPING: 'NX_SKIP_LOG_GROUPING',
  NX_MIGRATE_CLI_VERSION: 'NX_MIGRATE_CLI_VERSION',
  NX_LOAD_DOT_ENV_FILES: 'NX_LOAD_DOT_ENV_FILES',
  NX_NATIVE_FILE_CACHE_DIRECTORY: 'NX_NATIVE_FILE_CACHE_DIRECTORY',
} as const;

export function getNxEnvVar(envVar: keyof typeof NX_ENV_VARS) {
  assertNxTask();
  return process.env[envVar];
}
